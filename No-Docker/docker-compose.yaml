version: "3.8"
services:
  nodeapp:
    build:
      context: ./node-module
      dockerfile: Dockerfile
    container_name: node-api
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - postgres

  pythonapi:
    build:
      context: ./python-module
      dockerfile: Dockerfile
    container_name: python-api
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    ports:
      - "5050:5000"
    networks:
      - app-network
    depends_on:
      - postgres

  react:
    build:
      context: ./react-module/web-client
      dockerfile: Dockerfile
    container_name: reactapp
    ports:
      - "4000:4000"
    networks:
      - app-network
    depends_on:
      - nodeapp
      - pythonapi

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    
    volumes:
      - ./db/scripts:/docker-entrypoint-initdb.d
    ports:
      - "5416:5432"
    networks:
      - app-network
  


  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80" # Exposing Nginx on port 80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app-network
      
    depends_on:
      - nodeapp
      - pythonapi

networks:
  app-network:
    driver: bridge
